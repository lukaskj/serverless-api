# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: api-test
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: sa-east-1
  memorySize: 128
  versionFunctions: false

  # you can overwrite defaults here
  #  stage: dev
  #  region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  #  iamRoleStatements:
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:ListBucket"
  #      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:PutObject"
  #      Resource:
  #        Fn::Join:
  #          - ""
  #          - - "arn:aws:s3:::"
  #            - "Ref" : "ServerlessDeploymentBucket"
  #            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - env.json
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  api:
    handler: src/app.handler
    events:
      - httpApi:
          path: /{any+}
          method: "*"
#    Define function environment variables here
    environment:
      TYPEORM_CONNECTION: ${env:TYPEORM_CONNECTION}
      TYPEORM_DRIVER: ${env:TYPEORM_DRIVER}
      TYPEORM_HOST: ${env:TYPEORM_HOST}
      TYPEORM_PORT: ${env:TYPEORM_PORT}
      TYPEORM_DATABASE: ${env:TYPEORM_DATABASE}
      TYPEORM_USERNAME: ${env:TYPEORM_USERNAME}
      TYPEORM_PASSWORD: ${env:TYPEORM_PASSWORD}
      TYPEORM_SYNCHRONIZE: ${env:TYPEORM_SYNCHRONIZE}
      TYPEORM_LOGGING: ${env:TYPEORM_LOGGING}
      TYPEORM_ENTITIES: ${env:TYPEORM_ENTITIES}
      TYPEORM_MIGRATIONS: ${env:TYPEORM_MIGRATIONS}
      TYPEORM_ENTITIES_DIR: ${env:TYPEORM_ENTITIES_DIR}
      TYPEORM_MIGRATIONS_DIR: ${env:TYPEORM_MIGRATIONS_DIR}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello


# Example with RDS
# environment:
  #TYPEORM_HOST: ${self:custom.TYPEORM.HOST}
  #TYPEORM_PORT: ${self:custom.TYPEORM.PORT}
  #TYPEORM_DRIVER: ${env:TYPEORM_DRIVER}

#custom:
#  TYPEORM:
#    HOST:
#      Fn::GetAtt: [DatabaseResource, Endpoint.Address]
#    PORT:
#      Fn::GetAtt: [DatabaseResource, Endpoint.Port]
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    DatabaseResource:
#    # Settings https://amzn.to/2FygWeb
#      Type: AWS::RDS::DBCluster
#      Properties:
#        Engine: aurora
#        EngineMode: serverless
#        Port: 3306
#        DatabaseName: database_test
#        MasterUsername: test
#        MasterUserPassword: test
#        ScalingConfiguration:
#          AutoPause: true
#          SecondsUntilAutoPause: 300
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
